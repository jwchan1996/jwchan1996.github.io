<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我爱盐酥鸡</title>
  
  <subtitle>在现实断裂的地方 梦汇成了海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jwchan1996.github.io/"/>
  <updated>2019-06-27T11:56:23.145Z</updated>
  <id>https://jwchan1996.github.io/</id>
  
  <author>
    <name>Jwchan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>map 字符串数组/数字数组 快速转换</title>
    <link href="https://jwchan1996.github.io/2019/06/27/js_map/"/>
    <id>https://jwchan1996.github.io/2019/06/27/js_map/</id>
    <published>2019-06-27T11:50:08.182Z</published>
    <updated>2019-06-27T11:56:23.145Z</updated>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="前端" scheme="https://jwchan1996.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://jwchan1996.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>响应路由参数的变化保持功能选中状态</title>
    <link href="https://jwchan1996.github.io/2019/05/28/vue_watch_$route/"/>
    <id>https://jwchan1996.github.io/2019/05/28/vue_watch_$route/</id>
    <published>2019-05-28T09:09:09.238Z</published>
    <updated>2019-05-28T09:13:24.864Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;# 背景&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;背景&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;vue + vue-router&lt;/code&gt; 的项目中，单页面路由的出现使得页面加载更加优雅。&lt;br&gt;但与此同时，也会出现一些问题。&lt;/p&gt;
&lt;p&gt;比如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. 页面刷新如何保持功能选中状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 浏览器前进后退如何保持功能选中状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;😑 关于这两个问题，我们很容易想到通过监听路由地址来解决。&lt;/p&gt;
&lt;h4 id=&quot;页面刷新&quot;&gt;&lt;a href=&quot;#页面刷新&quot; class=&quot;headerlink&quot; title=&quot;# 页面刷新&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;页面刷新&lt;/h4&gt;&lt;p&gt;对于问题 &lt;code&gt;1&lt;/code&gt; ，解决方法就是在页面加载时根据路由地址判断当前选择的是什么，从而激活对应的选中样式。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://jwchan1996.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://jwchan1996.github.io/tags/vue/"/>
    
      <category term="vue-router" scheme="https://jwchan1996.github.io/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>关于 ref 与 $refs 对 dom 元素的操作</title>
    <link href="https://jwchan1996.github.io/2019/05/14/vue_$refs/"/>
    <id>https://jwchan1996.github.io/2019/05/14/vue_$refs/</id>
    <published>2019-05-14T11:48:00.432Z</published>
    <updated>2019-05-30T06:02:21.813Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何获取-v-for-渲染的多个不同-ref-的-dom&quot;&gt;&lt;a href=&quot;#如何获取-v-for-渲染的多个不同-ref-的-dom&quot; class=&quot;headerlink&quot; title=&quot;# 如何获取 v-for 渲染的多个不同 ref 的 dom&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;如何获取 v-for 渲染的多个不同 ref 的 dom&lt;/h3&gt;&lt;p&gt;🍍 在编写 &lt;code&gt;vue&lt;/code&gt; 项目过程中，遇到了获取不到正确的 &lt;code&gt;dom&lt;/code&gt; 元素节点的问题。&lt;/p&gt;
&lt;p&gt;功能界面如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/vue_$refs/vue_$refs_01.png&quot; alt=&quot;界面&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要实现的是，点击每个播放器的右上角的关闭按钮，则关闭播放器。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://jwchan1996.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://jwchan1996.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于 axios 请求出现 OPTIONS</title>
    <link href="https://jwchan1996.github.io/2019/05/06/axios_options/"/>
    <id>https://jwchan1996.github.io/2019/05/06/axios_options/</id>
    <published>2019-05-06T03:06:00.547Z</published>
    <updated>2019-05-06T03:34:47.130Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么-axios-先要请求-OPTIONS-再请求-POST&quot;&gt;&lt;a href=&quot;#为什么-axios-先要请求-OPTIONS-再请求-POST&quot; class=&quot;headerlink&quot; title=&quot;# 为什么 axios 先要请求 OPTIONS 再请求 POST&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;为什么 axios 先要请求 OPTIONS 再请求 POST&lt;/h3&gt;&lt;p&gt;🎨 最近在用 &lt;code&gt;vue&lt;/code&gt; 重写一个以前的 &lt;code&gt;angular&lt;/code&gt; + &lt;code&gt;thinkjs&lt;/code&gt; 的项目，由于项目环境的前后端分离了，就出现了跨域问题，配置了一下 &lt;code&gt;CORS&lt;/code&gt; 解决了跨域问题之后，又出现了 &lt;code&gt;axios&lt;/code&gt; 请求发送两次的情况。&lt;/p&gt;
&lt;p&gt;以登录功能为例，一共发送两个请求，第一个是 &lt;code&gt;OPTIONS&lt;/code&gt; 请求，第二个是 &lt;code&gt;POST&lt;/code&gt; 请求。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;axios&lt;/code&gt; 配置如下：
    
    </summary>
    
      <category term="axios" scheme="https://jwchan1996.github.io/categories/axios/"/>
    
    
      <category term="axios" scheme="https://jwchan1996.github.io/tags/axios/"/>
    
      <category term="跨域" scheme="https://jwchan1996.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="options" scheme="https://jwchan1996.github.io/tags/options/"/>
    
  </entry>
  
  <entry>
    <title>软件版本命名规则</title>
    <link href="https://jwchan1996.github.io/2019/04/17/version_number/"/>
    <id>https://jwchan1996.github.io/2019/04/17/version_number/</id>
    <published>2019-04-17T09:11:06.085Z</published>
    <updated>2019-04-17T12:15:18.830Z</updated>
    
    <summary type="html">
    
      &lt;style&gt;
    #version_number_01{
        border: 0 !important;
        /**设置缩放**/
        -webkit-transition: 0.2s all;
        -moz-transition: 0.2s all;
        -ms-transition: 0.2s all;
        transition: 0.2s all;
    }
    #version_number_01:hover{
        -webkit-transform: scale(1.02,1.02);
        -moz-transform: scale(1.02,1.02);
        -ms-transform: scale(1.02,1.02);
        transform: scale(1.02,1.02);
        box-shadow: 5px 5px 30px #999;
        cursor: pointer;
    }
&lt;/style&gt;

&lt;h3 id=&quot;版本号命名规则&quot;&gt;&lt;a href=&quot;#版本号命名规则&quot; class=&quot;headerlink&quot; title=&quot;# 版本号命名规则&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;版本号命名规则&lt;/h3&gt;&lt;p&gt;🍰 软件版本号有四部分组成：  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;第一部分为主版本号  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二部分为次版本号  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三部分为修订版本号  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第四部分为日期版本号加希腊字母版本号&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img id=&quot;version_number_01&quot; src=&quot;/images/version_number.png&quot;&gt;
    
    </summary>
    
      <category term="知识" scheme="https://jwchan1996.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="认知" scheme="https://jwchan1996.github.io/tags/%E8%AE%A4%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>获取 v-html 渲染的富文本数据元素内容</title>
    <link href="https://jwchan1996.github.io/2019/03/20/vue_v-html/"/>
    <id>https://jwchan1996.github.io/2019/03/20/vue_v-html/</id>
    <published>2019-03-20T06:32:08.461Z</published>
    <updated>2019-03-20T07:24:34.272Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;# 场景&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;场景&lt;/h3&gt;&lt;p&gt;🍰 在业务中，往往有时候需要处理富文本格式的数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;富文本格式数据： 带有html标签的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在传统的 &lt;code&gt;web&lt;/code&gt; 开发下，当我们获取到数据，只要使用 &lt;code&gt;append&lt;/code&gt; 或 &lt;code&gt;innerHtml&lt;/code&gt; 将元素添加到 &lt;code&gt;dom&lt;/code&gt; 中，再使用 &lt;code&gt;document.querySelector()&lt;/code&gt; 即可获取 &lt;code&gt;dom&lt;/code&gt; 元素。  &lt;/p&gt;
&lt;p&gt;而在 &lt;code&gt;vue&lt;/code&gt; 中，页面渲染完毕，&lt;code&gt;v-html&lt;/code&gt; 并没有触发页面渲染的重新执行，所以使用 &lt;code&gt;document.querySelector()&lt;/code&gt; 方式是获取不到数据的，因为 &lt;code&gt;dom&lt;/code&gt; 早在第一次加载时候就渲染完毕了，也就自然获取不到。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://jwchan1996.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://jwchan1996.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于控制台打印点击事件目标元素的 currentTarget 为 null</title>
    <link href="https://jwchan1996.github.io/2019/02/20/currentTarget_console_log/"/>
    <id>https://jwchan1996.github.io/2019/02/20/currentTarget_console_log/</id>
    <published>2019-02-20T11:41:49.730Z</published>
    <updated>2019-02-20T11:47:45.678Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;# 场景&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;场景&lt;/h3&gt;&lt;p&gt;JS 代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; target = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;target&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.currentTarget);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jwchan1996.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://jwchan1996.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>实现平滑滚动回到顶部</title>
    <link href="https://jwchan1996.github.io/2019/01/27/back_to_top/"/>
    <id>https://jwchan1996.github.io/2019/01/27/back_to_top/</id>
    <published>2019-01-27T10:19:08.574Z</published>
    <updated>2019-01-27T10:33:03.751Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;# 场景&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;场景&lt;/h3&gt;&lt;p&gt;🍰 实现页面滚动到一定位置，出现返回顶部图标&lt;br&gt;🍰 点击图标实现页面平滑滚动返回顶部&lt;/p&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;# 方案&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688&quot;&gt;# &lt;/span&gt;方案&lt;/h3&gt;&lt;p&gt;采用 window.requestAnimationFrame( ) 实现
    
    </summary>
    
      <category term="前端" scheme="https://jwchan1996.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://jwchan1996.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>使用 git 向开源项目提交 pull request</title>
    <link href="https://jwchan1996.github.io/2019/01/20/git_pull_request/"/>
    <id>https://jwchan1996.github.io/2019/01/20/git_pull_request/</id>
    <published>2019-01-20T08:10:55.377Z</published>
    <updated>2019-01-21T05:56:10.475Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Pull-Request-是什么&quot;&gt;&lt;a href=&quot;#Pull-Request-是什么&quot; class=&quot;headerlink&quot; title=&quot;#Pull Request 是什么&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688;&quot;&gt;#&lt;/span&gt;Pull Request 是什么&lt;/h3&gt;&lt;p&gt;⛏️ &lt;code&gt;Pull Request&lt;/code&gt; 是一种通知机制&lt;br&gt;你修改了他人的代码，将你的修改通知原来的作者，希望他合并你的修改，这就是 &lt;code&gt;Pull Request&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;⛏️ &lt;code&gt;Pull Request&lt;/code&gt; 本质上是一种软件的合作方式，是将涉及不同功能的代码，纳入主干的一种流程。这个过程中，还可以进行讨论、审核和修改代码  &lt;/p&gt;
&lt;p&gt;⛏️ 简单的说是在自己本地仓库修改代码，提交到自己远程仓库，提交 &lt;code&gt;PR&lt;/code&gt; 后被接受后，再会被合并到 &lt;code&gt;master&lt;/code&gt;
    
    </summary>
    
      <category term="git" scheme="https://jwchan1996.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://jwchan1996.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>解决 apicloud 下关闭 Win 页面失效问题</title>
    <link href="https://jwchan1996.github.io/2019/01/16/apicloud_closeWin/"/>
    <id>https://jwchan1996.github.io/2019/01/16/apicloud_closeWin/</id>
    <published>2019-01-16T12:21:14.359Z</published>
    <updated>2019-01-17T01:21:56.765Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;#场景&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688;&quot;&gt;#&lt;/span&gt;场景&lt;/h3&gt;&lt;p&gt;🌈 在使用 &lt;code&gt;apicloud&lt;/code&gt; 开发相关应用的时候，经常会遇到打开一个新的 &lt;code&gt;Window&lt;/code&gt; 页面，&lt;br&gt;同时需要把其他 &lt;code&gt;Window&lt;/code&gt; 或 &lt;code&gt;Frame&lt;/code&gt; 页面关闭的情况。&lt;br&gt;以下是官网 &lt;code&gt;api&lt;/code&gt; 文档的描述：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;closeWin&lt;/code&gt; 方法可以关闭 &lt;code&gt;Window&lt;/code&gt;，但注意，若当前正在进行 &lt;code&gt;openWin&lt;/code&gt;、&lt;code&gt;closeWin&lt;/code&gt; 等带动画过渡的 &lt;code&gt;Window&lt;/code&gt; 操作，调用此方法会失效。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="混合APP" scheme="https://jwchan1996.github.io/categories/%E6%B7%B7%E5%90%88APP/"/>
    
    
      <category term="apicloud" scheme="https://jwchan1996.github.io/tags/apicloud/"/>
    
  </entry>
  
  <entry>
    <title>非模块化下实现简单 vue-router 应用</title>
    <link href="https://jwchan1996.github.io/2019/01/10/vue_router_nomodular/"/>
    <id>https://jwchan1996.github.io/2019/01/10/vue_router_nomodular/</id>
    <published>2019-01-10T05:56:32.419Z</published>
    <updated>2019-01-11T03:03:29.006Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;#场景&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688;&quot;&gt;#&lt;/span&gt;场景&lt;/h3&gt;&lt;p&gt;一般情况下，我们使用工程化构建应用，需要的是导入 &lt;code&gt;Vue&lt;/code&gt; 和 &lt;code&gt;VueRouter&lt;/code&gt;，然后要调用 &lt;code&gt;Vue.use(VueRouter)&lt;/code&gt;&lt;br&gt;那么，如果是非模块化 &lt;code&gt;vue&lt;/code&gt; 使用 &lt;code&gt;vue-router&lt;/code&gt; 应用的实现，是怎么样的呢？  &lt;/p&gt;
&lt;p&gt;🍭 下面是贴代码时间：
    
    </summary>
    
      <category term="vue" scheme="https://jwchan1996.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://jwchan1996.github.io/tags/vue/"/>
    
      <category term="vue-router" scheme="https://jwchan1996.github.io/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>hover 伪类改变另一个元素的样式</title>
    <link href="https://jwchan1996.github.io/2019/01/06/css_hover/"/>
    <id>https://jwchan1996.github.io/2019/01/06/css_hover/</id>
    <published>2019-01-06T03:47:14.007Z</published>
    <updated>2019-01-06T08:05:39.279Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;#功能&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688;&quot;&gt;#&lt;/span&gt;功能&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;css&lt;/code&gt; 的 &lt;code&gt;hover&lt;/code&gt; 伪类改变另一个元素的样式&lt;br&gt;比如本博客友链页面，鼠标悬停 &lt;code&gt;a&lt;/code&gt; 标签，实现子元素 &lt;code&gt;img&lt;/code&gt; 标签进行旋转动画&lt;br&gt;使用 &lt;code&gt;js&lt;/code&gt; 触发动态添加属性可以实现，但最简便的办法是 &lt;code&gt;css hover&lt;/code&gt;&lt;br&gt;举个栗子：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;鼠标悬停在 &lt;code&gt;A&lt;/code&gt; 元素时，改变 &lt;code&gt;B&lt;/code&gt; 元素样式  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://jwchan1996.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://jwchan1996.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vue 实现 data 数据与视图更新</title>
    <link href="https://jwchan1996.github.io/2019/01/02/vue_data_update/"/>
    <id>https://jwchan1996.github.io/2019/01/02/vue_data_update/</id>
    <published>2019-01-02T06:05:09.081Z</published>
    <updated>2019-01-06T08:01:31.309Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;#场景&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688;&quot;&gt;#&lt;/span&gt;场景&lt;/h3&gt;&lt;p&gt;&lt;code&gt;vue&lt;/code&gt; 数据 &lt;code&gt;data&lt;/code&gt; 更新了，但是视图没有更新&lt;br&gt;其中缘由在于对 &lt;code&gt;vue&lt;/code&gt; 的响应式原理的理解&lt;/p&gt;
&lt;h3 id=&quot;追踪变化&quot;&gt;&lt;a href=&quot;#追踪变化&quot; class=&quot;headerlink&quot; title=&quot;#追踪变化&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688;&quot;&gt;#&lt;/span&gt;追踪变化&lt;/h3&gt;&lt;p&gt;把一个普通的 &lt;code&gt;JavaScript&lt;/code&gt; 对象传给 &lt;code&gt;Vue&lt;/code&gt; 实例的 data 选项，&lt;code&gt;Vue&lt;/code&gt; 将遍历此对象所有的属性，并使用 &lt;code&gt;Object.defineProperty&lt;/code&gt; 把这些属性全部转为 &lt;code&gt;getter/setter&lt;/code&gt;。&lt;br&gt;这些 &lt;code&gt;getter/setter&lt;/code&gt; 对用户来说是不可见的，但是在内部它们让 &lt;code&gt;Vue&lt;/code&gt; 追踪依赖，在属性被访问和修改时通知变化。
    
    </summary>
    
      <category term="vue" scheme="https://jwchan1996.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://jwchan1996.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Google DevFest 2018</title>
    <link href="https://jwchan1996.github.io/2019/01/02/GDG2018/"/>
    <id>https://jwchan1996.github.io/2019/01/02/GDG2018/</id>
    <published>2019-01-02T01:40:35.100Z</published>
    <updated>2019-01-02T01:57:45.133Z</updated>
    
    <summary type="html">
    
      &lt;style&gt;
    #GDG2018_01,
    #GDG2018_02,
    #GDG2018_03,
    #GDG2018_04,
    #GDG2018_05,
    #GDG2018_06,
    #GDG2018_07,
    #GDG2018_08,
    #GDG2018_09,
    #GDG2018_10{
        border: 0 !important;
        /**设置缩放**/
        -webkit-transition: 0.2s all;
        -moz-transition: 0.2s all;
        -ms-transition: 0.2s all;
        transition: 0.2s all;
    }
    #GDG2018_01:hover,
    #GDG2018_02:hover,
    #GDG2018_03:hover,
    #GDG2018_04:hover,
    #GDG2018_05:hover,
    #GDG2018_06:hover,
    #GDG2018_07:hover,
    #GDG2018_08:hover,
    #GDG2018_09:hover,
    #GDG2018_10:hover{
        -webkit-transform: scale(1.02,1.02);
        -moz-transform: scale(1.02,1.02);
        -ms-transform: scale(1.02,1.02);
        transform: scale(1.02,1.02);
        box-shadow: 5px 5px 30px #999;
        cursor: pointer;
    }
&lt;/style&gt;

&lt;p&gt;&lt;img id=&quot;GDG2018_01&quot; src=&quot;http://chinagdg.org/wp-content/uploads/2015/07/logo_lockup_gdg_horizontal-e1539944886259-600x247.png&quot;&gt;  &lt;/p&gt;
&lt;h3 id=&quot;什么是-GDG&quot;&gt;&lt;a href=&quot;#什么是-GDG&quot; class=&quot;headerlink&quot; title=&quot;#什么是 GDG&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688;&quot;&gt;#&lt;/span&gt;什么是 GDG&lt;/h3&gt;&lt;p&gt;&lt;code&gt;GDG&lt;/code&gt; 是 &lt;code&gt;Google Developer Groups&lt;/code&gt; (谷歌开发者社区)的缩写，也是现在项目的正式名称。&lt;code&gt;GDG&lt;/code&gt; 是谷歌开发者部门发起的开发者社区全球项目，是面向对 &lt;code&gt;Google&lt;/code&gt; 和开源、开放技术感兴趣的公益性开发者社区，内容涵盖 &lt;code&gt;Web&lt;/code&gt;、&lt;code&gt;Android&lt;/code&gt; 和其它 &lt;code&gt;Google API&lt;/code&gt; 等。目前在全球已有500多个 &lt;code&gt;GDG&lt;/code&gt; 社区，中国已有超过 20个 &lt;code&gt;GDG&lt;/code&gt; 社区。&lt;code&gt;GDG&lt;/code&gt; 主要面向开发者、设计师、创业者、大学生等软件从业人员，是一个开放和自由的社区。&lt;br&gt;
    
    </summary>
    
      <category term="活动" scheme="https://jwchan1996.github.io/categories/%E6%B4%BB%E5%8A%A8/"/>
    
    
      <category term="Google" scheme="https://jwchan1996.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>v-bind 动态拼接参数</title>
    <link href="https://jwchan1996.github.io/2018/12/29/vue_v-bind/"/>
    <id>https://jwchan1996.github.io/2018/12/29/vue_v-bind/</id>
    <published>2018-12-29T00:47:14.655Z</published>
    <updated>2019-01-06T07:59:05.943Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;#场景&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#009688;&quot;&gt;#&lt;/span&gt;场景&lt;/h3&gt;&lt;p&gt;在业务开发中常常&lt;br&gt;需要对元素属性进行动态绑定&lt;br&gt;比如 &lt;code&gt;v-for&lt;/code&gt; 下遍历 &lt;code&gt;img&lt;/code&gt; 绑定 &lt;code&gt;src&lt;/code&gt; 地址&lt;br&gt;传统方法用的是拼接 &lt;code&gt;dom&lt;/code&gt; 元素字符串，再把字符串&lt;br&gt;插入到文档流里，对于使用 &lt;code&gt;vue&lt;/code&gt;，我们不必再频繁地处理 &lt;code&gt;dom&lt;/code&gt;&lt;br&gt;我们可以使用 &lt;code&gt;v-bind&lt;/code&gt; 来处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错，需要处理妥当。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://jwchan1996.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://jwchan1996.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于 Axios Post 请求的坑</title>
    <link href="https://jwchan1996.github.io/2018/12/25/axios_post/"/>
    <id>https://jwchan1996.github.io/2018/12/25/axios_post/</id>
    <published>2018-12-25T11:47:14.481Z</published>
    <updated>2019-05-14T02:29:19.555Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Axios&quot;&gt;&lt;a href=&quot;#Axios&quot; class=&quot;headerlink&quot; title=&quot;Axios&quot;&gt;&lt;/a&gt;Axios&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Axios 是一个基于 &lt;code&gt;promise&lt;/code&gt; 的 HTTP 库，可以用在浏览器和 node.js 中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;踩坑&quot;&gt;&lt;a href=&quot;#踩坑&quot; class=&quot;headerlink&quot; title=&quot;踩坑&quot;&gt;&lt;/a&gt;踩坑&lt;/h2&gt;&lt;p&gt;按照 axios 官网例子使用 axios.post 发起请求传递 json，后台接受到的数据为空&lt;br&gt;浏览器报错，然后使用 &lt;code&gt;restlet&lt;/code&gt; 请求却可以正常返回数据&lt;br&gt;
    
    </summary>
    
      <category term="axios" scheme="https://jwchan1996.github.io/categories/axios/"/>
    
    
      <category term="axios" scheme="https://jwchan1996.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Git 实现代码托管</title>
    <link href="https://jwchan1996.github.io/2018/12/20/git_command/"/>
    <id>https://jwchan1996.github.io/2018/12/20/git_command/</id>
    <published>2018-12-20T01:52:38.682Z</published>
    <updated>2019-01-20T08:13:50.399Z</updated>
    
    <summary type="html">
    
      &lt;style&gt;
    #git_command{
        /**设置缩放**/
        -webkit-transition: 0.2s all;
        -moz-transition: 0.2s all;
        -ms-transition: 0.2s all;
        transition: 0.2s all;
    }
    #git_command:hover{
        -webkit-transform: scale(1.02,1.02);
        -moz-transform: scale(1.02,1.02);
        -ms-transform: scale(1.02,1.02);
        transform: scale(1.02,1.02);
        box-shadow: 5px 5px 30px #999;
        cursor: pointer;
    }
&lt;/style&gt;

&lt;blockquote&gt;
&lt;p&gt;前置条件: 在 github 上新建仓库，本地与远端已实现身份认证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🔶 第一步: 建立 git 仓库(本地)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;🔶 第二步: 将项目所有文件添加到待上传列表中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://jwchan1996.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://jwchan1996.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>11月份 / Summary</title>
    <link href="https://jwchan1996.github.io/2018/12/01/summary_201811/"/>
    <id>https://jwchan1996.github.io/2018/12/01/summary_201811/</id>
    <published>2018-12-01T07:59:10.434Z</published>
    <updated>2018-12-20T02:44:14.185Z</updated>
    
    <summary type="html">
    
      &lt;style&gt;
    #summary_201811_01,
    #summary_201811_02,
    #summary_201811_03,
    #summary_201811_04,
    #summary_201811_05,
    #summary_201811_06,
    #summary_201811_07,
    #summary_201811_08,
    #summary_201811_09{
        /**设置缩放**/
        -webkit-transition: 0.2s all;
        -moz-transition: 0.2s all;
        -ms-transition: 0.2s all;
        transition: 0.2s all;
    }
    #summary_201811_01:hover,
    #summary_201811_02:hover,
    #summary_201811_03:hover,
    #summary_201811_04:hover,
    #summary_201811_05:hover,
    #summary_201811_06:hover,
    #summary_201811_07:hover,
    #summary_201811_08:hover,
    #summary_201811_09:hover{
        -webkit-transform: scale(1.02,1.02);
        -moz-transform: scale(1.02,1.02);
        -ms-transform: scale(1.02,1.02);
        transform: scale(1.02,1.02);
        box-shadow: 5px 5px 30px #999;
        cursor: pointer;
    }
&lt;/style&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;雉青十一，渐入佳境&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;十一月份，是梳理的月份，是持续学习与渴望coding的。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;关于产品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;text-indent:2em;&quot;&gt;解决了用户需求，实现了产品目标对用户和公司来说是个好产品。而对于产品本身，应该从设计实现的每个细节角度来评判其是不是个好产品。每个功能是不是以最优的用户体验和技术实现方式来完成的。这个考验的是产品、设计、开发人员的功底，协作程度、责任心等各个方面。&lt;/p&gt;&lt;span style=&quot;color:red;&quot;&gt;功能设计&lt;/span&gt;方面：是否在协调用户体验和产品目标上找到最佳的平衡点？是否在最合适的场合为用户呈现了他需要的功能和帮助？是否考虑到了用户所以的使用场景？&lt;br&gt;
    
    </summary>
    
      <category term="生活与工作" scheme="https://jwchan1996.github.io/categories/%E7%94%9F%E6%B4%BB%E4%B8%8E%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="总结" scheme="https://jwchan1996.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>初探和实现websocket心跳重连</title>
    <link href="https://jwchan1996.github.io/2018/11/21/websocket/"/>
    <id>https://jwchan1996.github.io/2018/11/21/websocket/</id>
    <published>2018-11-21T08:04:02.672Z</published>
    <updated>2019-01-06T07:51:02.369Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;心跳重连缘由&quot;&gt;&lt;a href=&quot;#心跳重连缘由&quot; class=&quot;headerlink&quot; title=&quot;心跳重连缘由&quot;&gt;&lt;/a&gt;心跳重连缘由&lt;/h2&gt;&lt;p style=&quot;text-indent:2em;&quot;&gt;&lt;code&gt;websocket&lt;/code&gt; 是前后端交互的长连接，前后端也都可能因为一些情况导致连接失效并且相互之间没有反馈提醒。因此为了保证连接的可持续性和稳定性，&lt;code&gt;websocket&lt;/code&gt; 心跳重连就应运而生。&lt;/p&gt;&lt;p style=&quot;text-indent:2em;&quot;&gt;在使用原生 &lt;code&gt;websocket&lt;/code&gt; 的时候，如果设备网络断开，不会触发 &lt;code&gt;websocket&lt;/code&gt; 的任何事件函数，前端程序无法得知当前连接已经断开。这个时候如果调用 &lt;code&gt;websocket.send&lt;/code&gt; 方法，浏览器就会发现消息发不出去，便会立刻或者一定短时间后（不同浏览器或者浏览器版本可能表现不同）触发 &lt;code&gt;onclose&lt;/code&gt; 函数。&lt;/p&gt;&lt;p style=&quot;text-indent:2em;&quot;&gt;后端 &lt;code&gt;websocket&lt;/code&gt; 服务也可能出现异常，连接断开后前端也并没有收到通知，因此需要&lt;span style=&quot;color:red;&quot;&gt;前端定时发送心跳消息&lt;/span&gt; &lt;code&gt;ping&lt;/code&gt; ，&lt;span style=&quot;color:red;&quot;&gt;后端收到&lt;/span&gt; &lt;code&gt;ping&lt;/code&gt; 类型的消息，&lt;span style=&quot;color:red;&quot;&gt;立马返回&lt;/span&gt; &lt;code&gt;pong&lt;/code&gt; 消息，告知前端连接正常。如果一定时间没收到 &lt;code&gt;pong&lt;/code&gt; 消息，就说明连接不正常，前端便会执行重连。
    
    </summary>
    
      <category term="前端" scheme="https://jwchan1996.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://jwchan1996.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>10月份 / Summary</title>
    <link href="https://jwchan1996.github.io/2018/11/01/summary_201810/"/>
    <id>https://jwchan1996.github.io/2018/11/01/summary_201810/</id>
    <published>2018-11-01T03:16:57.538Z</published>
    <updated>2018-11-02T02:08:38.228Z</updated>
    
    <summary type="html">
    
      &lt;style&gt;
    #summary_201810_01,
    #summary_201810_02,
    #summary_201810_03,
    #summary_201810_04,
    #summary_201810_05,
    #summary_201810_06{
        /**设置缩放**/
        -webkit-transition: 0.2s all;
        -moz-transition: 0.2s all;
        -ms-transition: 0.2s all;
        transition: 0.2s all;
    }
    #summary_201810_01:hover,
    #summary_201810_02:hover,
    #summary_201810_03:hover,
    #summary_201810_04:hover,
    #summary_201810_05:hover,
    #summary_201810_06:hover{
        -webkit-transform: scale(1.02,1.02);
        -moz-transform: scale(1.02,1.02);
        -ms-transform: scale(1.02,1.02);
        transform: scale(1.02,1.02);
        box-shadow: 5px 5px 30px #999;
        cursor: pointer;
    }
&lt;/style&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;未央十月，清风微似梦&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;十月份于我，是一个慵懒的月份，也是个探索的月份，没有coding的紧迫感，也没有八九月份的热情。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;01~07号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;text-indent:2em;&quot;&gt;在经历过对未知领域与技术的了解与实践后，九月末搭建了博客，接着就开启了一个星期的国庆假期，在经过了佛性的几天后，抓着假期的尾巴，去了长隆水上乐园，太阳很猛，水温很凉，全程玩下来整整一个下午，单论玩真的很值，很刺激，过后泡个温泉浴，身心舒畅，回来站上体重秤一秤发现轻了两斤，血亏！(因为博主9月中旬制定了增重计划)，建议需要减肥的同学可以去玩一哈……&lt;/p&gt;
    
    </summary>
    
      <category term="生活与工作" scheme="https://jwchan1996.github.io/categories/%E7%94%9F%E6%B4%BB%E4%B8%8E%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="总结" scheme="https://jwchan1996.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
